import streamlit as st
import pandas as pd
import plotly.express as px
import random

def aide_decision(df):
    # Titre avec emoji
    st.title("üß† Aide √† la d√©cision th√©rapeutique")
    
    # Description simple
    st.write(
        "Cet outil simule un syst√®me d'aide √† la d√©cision pour les traitements MICI. "
        "Entrez les informations du patient pour recevoir une suggestion de traitement."
    )
    
    # Encadr√© bleu d'information
    st.info("Les recommandations sont bas√©es sur l'analyse des patients similaires dans la base de donn√©es.")
    
    # Cr√©ation de deux colonnes pour le formulaire
    col1, col2 = st.columns(2)
    
    # Premi√®re colonne - Informations de base
    with col1:
        st.subheader("Informations du patient")
        # Utilisation de widgets simples
        age = st.slider("√Çge du patient", 18, 90, 45)
        sexe = st.radio("Sexe", ["H", "F"])
        
    # Deuxi√®me colonne - Informations sur la maladie
    with col2:
        st.subheader("Caract√©ristiques de la maladie")
        # Liste d√©roulante simple
        maladie = st.selectbox("Type de MICI", options=df["maladie"].unique())
        # Checkbox pour options suppl√©mentaires
        severe = st.checkbox("Forme s√©v√®re")
    
    # S√©parateur visuel
    st.markdown("---")
    
    # Bouton d'action principal
    if st.button("G√©n√©rer une recommandation de traitement", use_container_width=True):
        
        # Animation de chargement
        with st.spinner("Analyse en cours..."):
            # Simulation d'un petit d√©lai pour donner l'impression de calcul
            import time
            time.sleep(1.5)
            
            # Filtrage basique des patients similaires
            patients_similaires = df[
                (df["sexe"] == sexe) & 
                (df["maladie"] == maladie)
            ]
            
            # Comptage simple des r√©sultats par traitement
            resultats = {}
            for traitement in patients_similaires["traitement"].unique():
                patients_traitement = patients_similaires[patients_similaires["traitement"] == traitement]
                # Calcul simple d'efficacit√© 
                efficacite = (patients_traitement["reponse_traitement"] == "Efficace").mean() * 100
                resultats[traitement] = {
                    "efficacite": efficacite,
                    "patients": len(patients_traitement)
                }
        
        # Affichage des r√©sultats
        if resultats:
            # Transformation en DataFrame pour faciliter le tri
            resultats_df = pd.DataFrame([
                {"traitement": t, "efficacite": r["efficacite"], "patients": r["patients"]} 
                for t, r in resultats.items()
            ])
            
            # Tri par efficacit√©
            resultats_df = resultats_df.sort_values("efficacite", ascending=False)
            
            # Recommandation principale
            meilleur_traitement = resultats_df.iloc[0]["traitement"]
            meilleure_efficacite = resultats_df.iloc[0]["efficacite"]
            
            # Affichage de la recommandation dans un encadr√© vert
            st.success(f"""
                ### Traitement recommand√©: **{meilleur_traitement}**
                
                Pour un patient de {age} ans, {sexe}, avec {maladie}
                
                * Taux de r√©ussite estim√©: **{meilleure_efficacite:.1f}%**
                * Bas√© sur {resultats_df.iloc[0]["patients"]} cas similaires
            """)
            
            # Graphique simple pour visualiser les options
            st.subheader("Comparaison des traitements")
            fig = px.bar(
                resultats_df,
                x="traitement", 
                y="efficacite",
                color="efficacite",
                color_continuous_scale=["red", "yellow", "green"],
                labels={"traitement": "Traitement", "efficacite": "Efficacit√© (%)"}
            )
            st.plotly_chart(fig, use_container_width=True)
            
            # Tableau simple
            st.subheader("D√©tails")
            st.dataframe(
                resultats_df.rename(columns={
                    "traitement": "Traitement", 
                    "efficacite": "Efficacit√© (%)", 
                    "patients": "Nombre de patients"
                }).round(1)
            )
            
        else:
            # Message d'erreur simple
            st.error("Pas assez de donn√©es pour ce profil de patient.")
            
